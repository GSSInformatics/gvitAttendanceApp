package com.gvit.gims.attendance;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.text.format.Time;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ProgressBar;

import com.Wsdl2Code.WebServices.Attendance.Attendance;
import com.Wsdl2Code.WebServices.Attendance.IWsdl2CodeEvents;
import com.Wsdl2Code.WebServices.Attendance.VectorString;
import com.Wsdl2Code.WebServices.Users.Users;
import com.Wsdl2Code.WebServices.Users.VectorUsers;
import com.gvit.gims.attendance.login.LoginDBContentProvider;

/**
 * @author Ajaykumar Vasireddy
 * @version 0.1
 * @since 2014
 */
public class Maintanance extends Activity implements OnClickListener,
		IWsdl2CodeEvents {
	private ProgressBar progressBar;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_maintanance);
		registerListeners();
		progressBar = (ProgressBar) findViewById(R.id.progressBar1);
		progressBar.setVisibility(View.GONE);
	}

	private void registerListeners() {
		findViewById(R.id.returnButton).setOnClickListener(this);
		findViewById(R.id.usersButton).setOnClickListener(this);
		findViewById(R.id.studentsButton).setOnClickListener(this);
		findViewById(R.id.attendanceButton).setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {

		switch (v.getId()) {
		case R.id.usersButton:
			Attendance webservice = new Attendance(this);
			try {
				webservice.getUsersAsync();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;

		case R.id.returnButton:
			Intent returnToLogin = new Intent(Maintanance.this,
					LoginActivity.class);
			startActivity(returnToLogin);
			break;

		case R.id.attendanceButton:
			String columns[] = { "YEAR", "BRANCH", "SECTION", "REGNO",
					"PERIOD", "SUBJECT", "STATUS" };

			String wheredate = "ATTDATE";
			Time today = new Time(Time.getCurrentTimezone());
			today.setToNow();
			String attDate = new StringBuilder().append(today.monthDay)
					.append("/").append(today.month + 1).append("/")
					.append(today.year).toString();

			String[] selectionArgs = { attDate };
			Cursor attendance = getContentResolver().query(
					LoginDBContentProvider.STATUS_CONTENT_URI, columns,
					wheredate, selectionArgs, null);
			Attendance webserviceCall = new Attendance(this);
			while (attendance.moveToNext()) {
				String year = attendance.getString(attendance
						.getColumnIndex("YEAR"));
				String branch = attendance.getString(attendance
						.getColumnIndex("BRANCH"));
				String section = attendance.getString(attendance
						.getColumnIndex("SECTION"));
				String regno = attendance.getString(attendance
						.getColumnIndex("REGNO"));
				String period = attendance.getString(attendance
						.getColumnIndex("PERIOD"));
				String subject = attendance.getString(attendance
						.getColumnIndex("SUBJECT"));
				String status = attendance.getString(attendance
						.getColumnIndex("STATUS"));
				VectorString absente = new VectorString();
				absente.add(regno);
				try {
					webserviceCall.persistAttendanceAsync(
							getApplicationContext(), attDate, branch, branch,
							year, section, period, subject, absente);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			break;
		case R.id.studentsButton:
			// Dialog notImplYet = new Dialog(getApplicationContext());
			AlertDialog.Builder notImplYet2 = new AlertDialog.Builder(this);
			notImplYet2.setTitle("WorkInProgress");
			notImplYet2.setCancelable(true);
			notImplYet2
					.setMessage("We know the importance of this feature. Please wait untill next sprint");
			notImplYet2.create();
			break;
		default:
			break;
		}
	}

	@Override
	public void Wsdl2CodeStartedRequest() {
		progressBar.setVisibility(View.VISIBLE);
		progressBar.animate();
	}

	@Override
	public void Wsdl2CodeFinished(String methodName, Object Data) {
		VectorUsers userList = (VectorUsers) Data;
		for (Users user : userList) {
			ContentValues rowValue = new ContentValues();
			rowValue.put("USERNAME", user.name);
			rowValue.put("PASSWORD", user.password);
			getContentResolver().insert(
					LoginDBContentProvider.LOGIN_CONTENT_URI, rowValue);
		}
		progressBar.clearAnimation();
		progressBar.setVisibility(View.GONE);
	}

	@Override
	public void Wsdl2CodeFinishedWithException(Exception ex) {

	}

	@Override
	public void Wsdl2CodeEndedRequest() {
		// TODO Auto-generated method stub

	}
}
